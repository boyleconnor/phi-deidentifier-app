/* tslint:disable */
/* eslint-disable */
/**
 * NLP Sandbox Deidentifier API
 * The OpenAPI specification implemented by NLP Sandbox PHI Deidentifiers. # Overview TBA 
 *
 * The version of the OpenAPI document: 0.2.2
 * Contact: thomas.schaffter@sagebionetworks.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Information about an NLP service
 * @export
 * @interface Service
 */
export interface Service {
    /**
     * The service name
     * @type {string}
     * @memberof Service
     */
    name?: string;
    /**
     * The version of the service (SemVer string)
     * @type {string}
     * @memberof Service
     */
    version?: string;
    /**
     * The license of this service (spdx.org/licenses Identifier)
     * @type {string}
     * @memberof Service
     */
    license?: ServiceLicenseEnum;
    /**
     * The place where the code lives
     * @type {string}
     * @memberof Service
     */
    repository?: string;
    /**
     * A short, one-sentence summary of the service
     * @type {string}
     * @memberof Service
     */
    description?: string;
    /**
     * The author of the service
     * @type {string}
     * @memberof Service
     */
    author?: string;
    /**
     * The email address of the author
     * @type {string}
     * @memberof Service
     */
    authorEmail?: string;
    /**
     * The URL to the homepage of the service
     * @type {string}
     * @memberof Service
     */
    url?: string;
}

export function ServiceFromJSON(json: any): Service {
    return ServiceFromJSONTyped(json, false);
}

export function ServiceFromJSONTyped(json: any, ignoreDiscriminator: boolean): Service {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': !exists(json, 'name') ? undefined : json['name'],
        'version': !exists(json, 'version') ? undefined : json['version'],
        'license': !exists(json, 'license') ? undefined : json['license'],
        'repository': !exists(json, 'repository') ? undefined : json['repository'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'author': !exists(json, 'author') ? undefined : json['author'],
        'authorEmail': !exists(json, 'authorEmail') ? undefined : json['authorEmail'],
        'url': !exists(json, 'url') ? undefined : json['url'],
    };
}

export function ServiceToJSON(value?: Service | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'version': value.version,
        'license': value.license,
        'repository': value.repository,
        'description': value.description,
        'author': value.author,
        'authorEmail': value.authorEmail,
        'url': value.url,
    };
}

/**
* @export
* @enum {string}
*/
export enum ServiceLicenseEnum {
    Afl30 = 'afl-3.0',
    Apache20 = 'apache-2.0',
    Artistic20 = 'artistic-2.0',
    Bsl10 = 'bsl-1.0',
    Bsd2Clause = 'bsd-2-clause',
    Bsd3Clause = 'bsd-3-clause',
    Bsd3ClauseClear = 'bsd-3-clause-clear',
    Cc = 'cc',
    Cc010 = 'cc0-1.0',
    CcBy40 = 'cc-by-4.0',
    CcBySa40 = 'cc-by-sa-4.0',
    Wtfpl = 'wtfpl',
    Ecl20 = 'ecl-2.0',
    Epl10 = 'epl-1.0',
    Epl20 = 'epl-2.0',
    Eupl11 = 'eupl-1.1',
    Agpl30 = 'agpl-3.0',
    Gpl = 'gpl',
    Gpl20 = 'gpl-2.0',
    Gpl30 = 'gpl-3.0',
    Lgpl = 'lgpl',
    Lgpl21 = 'lgpl-2.1',
    Lgpl30 = 'lgpl-3.0',
    Isc = 'isc',
    Lppl13c = 'lppl-1.3c',
    MsPl = 'ms-pl',
    Mit = 'mit',
    Mpl20 = 'mpl-2.0',
    Osl30 = 'osl-3.0',
    Postgresql = 'postgresql',
    Ofl11 = 'ofl-1.1',
    Ncsa = 'ncsa',
    Unlicense = 'unlicense',
    Zlib = 'zlib'
}


