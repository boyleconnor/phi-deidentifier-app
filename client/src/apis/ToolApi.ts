/* tslint:disable */
/* eslint-disable */
/**
 * NLP Sandbox PHI Deidentifier API
 * # Overview This NLP tool relies on the following NLP tools to deidentify a clinical note given as input. - Data Annotator - Person Name Annotator - Physical Address Annotator - TBA 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: thomas.schaffter@sagebionetworks.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Tool,
    ToolFromJSON,
    ToolToJSON,
    ToolDependencies,
    ToolDependenciesFromJSON,
    ToolDependenciesToJSON,
} from '../models';

/**
 * 
 */
export class ToolApi extends runtime.BaseAPI {

    /**
     * Get information about the tool
     * Get tool information
     */
    async getToolRaw(): Promise<runtime.ApiResponse<Tool>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tool`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ToolFromJSON(jsonValue));
    }

    /**
     * Get information about the tool
     * Get tool information
     */
    async getTool(): Promise<Tool> {
        const response = await this.getToolRaw();
        return await response.value();
    }

    /**
     * Get the dependencies of this tool
     * Get tool dependencies
     */
    async getToolDependenciesRaw(): Promise<runtime.ApiResponse<ToolDependencies>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tool/dependencies`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ToolDependenciesFromJSON(jsonValue));
    }

    /**
     * Get the dependencies of this tool
     * Get tool dependencies
     */
    async getToolDependencies(): Promise<ToolDependencies> {
        const response = await this.getToolDependenciesRaw();
        return await response.value();
    }

}
